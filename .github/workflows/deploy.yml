name: Deploy to EC2 from Latest GitHub Release

on:
  workflow_dispatch:  # 수동 실행을 허용하는 이벤트

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      # 1. 최신 릴리스에서 JAR 파일 다운로드
      - name: Get Latest Release
        id: get_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/reposy/springboot-kotlin/releases/latest)
          tag_name=$(echo $latest_release | jq -r .tag_name)
          echo "Latest tag name is $tag_name"
          echo "tag=$tag_name" >> $GITHUB_ENV  # 새로운 방식으로 환경 변수 설정

      # 2. 최신 릴리스에서 JAR 파일 다운로드
      - name: Download Latest Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.tag }}  # 자동으로 가져온 최신 태그
          files: springboot-kotlin-0.0.1-SNAPSHOT.jar  # 다운로드할 JAR 파일 이름
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ACTIONS }}  # Personal Access Token 사용

      # 3. JAR 파일을 EC2로 업로드
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: springboot-kotlin-0.0.1-SNAPSHOT.jar  # 실제 JAR 파일 이름
          target: /home/ubuntu/sypg/app.jar  # EC2의 지정된 경로에 저장

      # 4. EC2에서 Docker 컨테이너 실행
      - name: Run Docker Container on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop springboot-kotlin-container || true  # 컨테이너 중지
            sudo docker rm springboot-kotlin-container || true    # 컨테이너 제거
            sudo docker run -d -p 8080:8080 --name springboot-kotlin-container openjdk:21-jdk-slim java -jar /home/ubuntu/sypg/app.jar