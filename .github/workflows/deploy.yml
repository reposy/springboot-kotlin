name: Deploy to EC2 from Latest GitHub Release

on:
  release:
    types: [published]  # 릴리스가 게시될 때 트리거
  workflow_dispatch:    # 수동 실행을 허용하는 이벤트

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      # 1. 최신 릴리스에서 파일 목록을 확인하고 첫 번째 자산을 다운로드
      - name: Get Latest Release Asset
        id: get_asset
        run: |
          latest_release=$(curl -s https://api.github.com/repos/reposy/springboot-kotlin/releases/latest)
          asset_url=$(echo $latest_release | jq -r '.assets[0].browser_download_url')
          asset_name=$(echo $latest_release | jq -r '.assets[0].name')
          echo "Latest asset URL: $asset_url"
          echo "Latest asset name: $asset_name"
          curl -L -o $asset_name $asset_url
          echo "asset_name=$asset_name" >> $GITHUB_ENV

      # 2. JAR 파일을 EC2로 업로드
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ env.asset_name }}  # 자동으로 가져온 파일 이름
          target: /home/ubuntu/sypg/app.jar  # EC2의 지정된 경로에 저장

      # 3. EC2에서 Docker 컨테이너 실행
      - name: Run Docker Container on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop springboot-kotlin-container || true  # 컨테이너 중지
            sudo docker rm springboot-kotlin-container || true    # 컨테이너 제거
            sudo docker run -d -p 8080:8080 --name springboot-kotlin-container openjdk:21-jdk-slim java -jar /home/ubuntu/sypg/app.jar